vim.cmd([[
  set tabstop=2
  set expandtab
  set shiftwidth=2
  set number
  set relativenumber
  set hlsearch
  set incsearch
  set clipboard=unnamedplus

  " –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
  autocmd BufWritePre * Autoformat
]])

-- The rest is from extraLuaConfig
vim.g.mapleader = " "

-- Catppuccin —Ç–µ–º–∞
require("catppuccin").setup({
    flavour = "mocha",
    transparent_background = false,
    integrations = {
    alpha = true,
    cmp = true,
    gitsigns = true,
    telescope = true,
    which_key = true,
    bufferline = true,
    },
    })
vim.cmd.colorscheme "catppuccin"

-- Flash.nvim
require("flash").setup({
    jump = { autojump = true },
    modes = { search = { enabled = true } },
    })
vim.keymap.set({"n","x","o"}, "<leader>s", function()
    require("flash").jump()
    end, { desc = "Flash jump" })

-- Telescope
require("telescope").setup({
    defaults = {
    mappings = {
    i = {
    ["<C-j>"] = "move_selection_next",
    ["<C-k>"] = "move_selection_previous",
    },
    },
    },
    })
local builtin = require("telescope.builtin")
vim.keymap.set("n", "<leader>ff", builtin.find_files, { desc = "Find files" })
vim.keymap.set("n", "<leader>fg", builtin.live_grep, { desc = "Live grep" })
vim.keymap.set("n", "<leader>fb", builtin.buffers, { desc = "Find buffers" })
vim.keymap.set("n", "<leader>fh", builtin.help_tags, { desc = "Help tags" })

-- Lualine
require("lualine").setup({
    options = {
    icons_enabled = true,
    theme = "auto",
    },
    sections = {
    lualine_a = {"mode"},
    lualine_b = {"branch", "diff", "diagnostics"},
    lualine_c = {"filename"},
    lualine_x = {"filesize", "filetype"},
    lualine_y = {"progress"},
    lualine_z = {"location"},
    },
    extensions = {"neo-tree"},
    })

-- Bufferline
require("bufferline").setup({
    options = {
    numbers = "ordinal", -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ (1,2,3...)
    indicator = { style = "underline" },
    diagnostics = "nvim_lsp",
    separator_style = "slant",
    show_buffer_close_icons = true,
    show_close_icon = false,
    }
    })

-- üîë –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—É—Ñ–µ—Ä–æ–≤
for i = 1, 9 do
  -- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: <leader> + —Ü–∏—Ñ—Ä–∞
    vim.keymap.set("n", "<leader>" .. i,
        "<Cmd>BufferLineGoToBuffer " .. i .. "<CR>",
        { desc = "Go to buffer " .. i })

-- –ó–∞–∫—Ä—ã—Ç–∏–µ: <leader>b + —Ü–∏—Ñ—Ä–∞ (–±–µ–∑ –≤—ã—Ö–æ–¥–∞ –∏–∑ Neovim)
vim.keymap.set("n", "<leader>b" .. i, function()
    vim.cmd("BufferLineGoToBuffer " .. i)
    vim.cmd("Bdelete")  -- ‚úÖ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    end, { desc = "Close buffer " .. i })
end

-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
vim.keymap.set("n", "<Tab>", "<Cmd>BufferLineCycleNext<CR>", { desc = "Next buffer" })
vim.keymap.set("n", "<S-Tab>", "<Cmd>BufferLineCyclePrev<CR>", { desc = "Previous buffer" })
vim.keymap.set("n", "<leader>bd", "<Cmd>Bdelete<CR>", { desc = "Close current buffer safely" })

-- üîë –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
vim.keymap.set("n", "<leader>w", "<Cmd>w<CR>", { desc = "Save file" })
vim.keymap.set("n", "<leader>W", "<Cmd>wa<CR>", { desc = "Save all files" })

-- üîë –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –±—É—Ñ–µ—Ä
vim.keymap.set("n", "<leader>q", "<Cmd>w<bar>Bdelete<CR>", { desc = "Save & close buffer" })
vim.keymap.set("n", "<leader>Q", "<Cmd>wa<bar>qa<CR>", { desc = "Save all & quit Neovim" })

-- üîë –ë—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
vim.keymap.set("n", "<leader>qq", "<Cmd>q!<CR>", { desc = "Force quit buffer" })


-- Neo-tree (–±–µ–∑ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞)
require("neo-tree").setup({
    close_if_last_window = true,
    window = {
    position = "left",
    width = 30,
    mappings = {
    ["<space>"] = "none", -- –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–±–µ–ª–∞
    ["<CR>"] = "open",    -- Enter = –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
    },
    },
    filesystem = {
    filtered_items = {
    visible = true,
    hide_dotfiles = false,
    hide_gitignored = false,
    },
    follow_current_file = { enabled = true },
    hijack_netrw_behavior = "open_default",
    },
    buffers = {
    follow_current_file = { enabled = true },
    },
    event_handlers = {
      {
        event = "file_opened",
        handler = function(_)
          -- –ó–∞–∫—Ä—ã–≤–∞—Ç—å Neo-tree –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ (—á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä –±—ã–ª –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
          require("neo-tree.command").execute({ action = "close" })
          end
      },
      {
        event = "file_hovered",
        handler = function(file)
          -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
          require("neo-tree.sources.common.preview").preview(file)
          end
      },
    },
})

-- üîë –£–¥–æ–±–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏ –¥–ª—è Neo-tree
-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: <leader><Tab>
vim.keymap.set("n", "<leader><Tab>", function()
    if vim.bo.filetype == "neo-tree" then
    vim.cmd.wincmd("p") -- –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—É—Ñ–µ—Ä/–æ–∫–Ω–æ
    else
    require("neo-tree.command").execute({ action = "focus" })
    end
    end, { desc = "Toggle between Neo-tree and editor" })

-- –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å Neo-tree
vim.keymap.set("n", "<leader>e", function()
    require("neo-tree.command").execute({ toggle = true })
    end, { desc = "Toggle Neo-tree" })

-- Gitsigns
require("gitsigns").setup({
    signs = {
    add          = { text = "+" },
    change       = { text = "‚îÇ" },
    delete       = { text = "_" },
    topdelete    = { text = "‚Äæ" },
    changedelete = { text = "~" },
    },
    current_line_blame = true,
    })
vim.keymap.set('n', ']g', require('gitsigns').next_hunk, { desc = 'Go to next git hunk' })
vim.keymap.set('n', '[g', require('gitsigns').prev_hunk, { desc = 'Go to previous git hunk' })

-- Alpha: Dashboard / –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
pcall(function()
    local alpha = require("alpha")
    local dashboard = require("alpha.themes.dashboard")

    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫ - ASCII Art
    dashboard.section.header.val = {
        "‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó",
        "‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù",
        "‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ",
        "‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  ",
        "‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ",
        "‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ",
    }

    -- –ö–Ω–æ–ø–∫–∏
    dashboard.section.buttons.val = {
        dashboard.button("f", "Û∞àî  Find file",      ":Telescope find_files<CR>"),
        dashboard.button("g", "Û∞äÑ  Find word",      ":Telescope live_grep<CR>"),
        dashboard.button("r", "Û∞ãö  Recent files",   ":Telescope oldfiles<CR>"),
        dashboard.button("b", "Û∞ì©  Buffers",        ":Telescope buffers<CR>"),
        dashboard.button("n", "Û∞è´  New file",       ":enew<CR>"),
        dashboard.button("q", "Û∞Öö  Quit",           ":qa<CR>"),
    }

    -- –§—É—Ç–µ—Ä
    dashboard.section.footer.val = require("alpha.fortune")()

    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    alpha.setup(dashboard.opts)
end)

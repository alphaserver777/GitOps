version: '3.8' # Указываем версию Docker Compose файла

services:
  healthchecks:
    image: lscr.io/linuxserver/healthchecks:latest
    container_name: healthchecks
    environment:
      # --- Обязательные настройки ---
      # PUID и PGID: ID пользователя и группы внутри контейнера.
      # Используйте 'id -u' и 'id -g' в вашей системе для получения своих значений.
      # Часто 1000 - это стандартный пользователь.
      - PUID=1000
      - PGID=1000
      # TZ: Часовой пояс контейнера.
      # Замените на свой часовой пояс, например, Europe/Moscow
      - TZ=Etc/UTC # Или Europe/Moscow
      # SITE_ROOT: Базовый URL для вашего экземпляра Healthchecks.
      # Для локального доступа используйте localhost с портом.
      - SITE_ROOT=http://localhost:8000
      # SITE_NAME: Название, отображаемое в пользовательском интерфейсе Healthchecks.
      - SITE_NAME=Мои Локальные Healthchecks
      # SUPERUSER_EMAIL и SUPERUSER_PASSWORD:
      # Учетные данные для создания первого администратора при первом запуске.
      # ОБЯЗАТЕЛЬНО ИЗМЕНИТЕ ЭТИ ЗНАЧЕНИЯ НА СИЛЬНЫЕ ДЛЯ ЛЮБОГО ПРОДАКШЕНА!
      - SUPERUSER_EMAIL=admin@example.com
      - SUPERUSER_PASSWORD=VerySecurePasswordForAdmin!

      # SECRET_KEY: Секретный ключ для Django. Крайне важен для безопасности!
      # Должен быть длинной, случайной строкой.
      # Можно сгенерировать: python -c 'import os; print(os.urandom(50))'
      - SECRET_KEY=your_very_long_and_random_secret_key_here_for_healthchecks_security

      # ALLOWED_HOSTS: Доверенные хосты, с которых можно обращаться к Healthchecks.
      # Для локальной разработки включаем localhost и 127.0.0.1, а также IP вашей ВМ (если используете).
      - ALLOWED_HOSTS=localhost,127.0.0.1,192.168.88.142

      # --- Настройки для разработки/отладки ---
      # DEBUG: Включить режим отладки (подробные ошибки).
      # Для локальной разработки рекомендуется 'True', для продакшена - 'False'.
      - DEBUG=True

      # --- Настройки для уведомлений по Email (опционально) ---
      # Если вы хотите, чтобы Healthchecks отправлял email-уведомления:
      #- DEFAULT_FROM_EMAIL=healthchecks@yourdomain.com
      #- EMAIL_HOST=smtp.your-email-provider.com
      #- EMAIL_PORT=587 # Или 465 для SSL (тогда EMAIL_USE_TLS=False, EMAIL_USE_SSL=True)
      #- EMAIL_HOST_USER=your_smtp_username
      #- EMAIL_HOST_PASSWORD=your_smtp_password
      #- EMAIL_USE_TLS=True # Используйте TLS (StartTLS)
      #- EMAIL_USE_SSL=False # Используйте SSL (для порта 465 обычно)
      #- EMAIL_USE_VERIFICATION=True # Требовать верификацию email адреса отправителя

      # --- Настройки пинга по Email (опционально) ---
      # Домен, с которого Healthchecks будет ожидать email-пинги.
      # - PING_EMAIL_DOMAIN=yourdomain.com

      # --- Настройки WebAuthn / Passkeys (опционально) ---
      # RP_ID: ID доверяющей стороны для аутентификации WebAuthn.
      # Должен быть доменом (без протокола и порта). Для локальной разработки можно 'localhost'.
      # - RP_ID=localhost

      # --- Настройки для других интеграций (опционально) ---
      # Отключите те, которые не планируете использовать, чтобы избежать лишних полей в UI.
      # - APPRISE_ENABLED=False # Уже задано
      # - CSRF_TRUSTED_ORIGINS= # Если используете прокси или CDN, которые меняют origin.
      # - INTEGRATIONS_ALLOW_PRIVATE_IPS=False # Разрешить интеграциям отправлять запросы на приватные IP
      # - SITE_LOGO_URL= # URL для кастомного логотипа

      # --- Несколько других полезных параметров для локалки/тестирования ---
      # - REGISTRATION_OPEN=True # Разрешить свободную регистрацию пользователей (обычно True для локалки)
      # - PING_BODY_LIMIT=10000 # Максимальный размер тела запроса пинга
      # - PING_ENDPOINT=http://localhost:8000/ping/ # Куда отправлять пинги (для внешнего использования)
      # - SHELL_ENABLED=False # Разрешить использование shell-интеграции (по умолчанию False, из соображений безопасности)
      # - MASTER_BADGE_LABEL=Mychecks # Текст на мастер-значке
      # - PROMETHEUS_ENABLED=True # Включить метрики Prometheus

      # --- Примеры настройки для некоторых интеграций, если будете использовать: ---
      # SLACK:
      # - SLACK_CLIENT_ID=your_slack_client_id
      # - SLACK_CLIENT_SECRET=your_slack_client_secret
      # - SLACK_ENABLED=True # Активировать Slack

      # TELEGRAM:
      # - TELEGRAM_TOKEN=your_telegram_bot_token
      # - TELEGRAM_BOT_NAME=YourHealthchecksBotName
      # - TELEGRAM_ENABLED=True # Активировать Telegram (часто не требуется)

      # PUSHOVER:
      # - PUSHOVER_API_TOKEN=your_pushover_api_token
      # - PUSHOVER_EMERGENCY_EXPIRATION=86400
      # - PUSHOVER_EMERGENCY_RETRY_DELAY=300
      # - PUSHOVER_SUBSCRIPTION_URL=

      # --- Настройки базы данных (для linuxserver/healthchecks они обычно берутся из их скриптов) ---
      # Image lscr.io/linuxserver/healthchecks:latest обычно уже имеет встроенную SQLite DB,
      # если вы не указываете внешнюю PostgreSQL/MySQL через LSIO_DB_HOST и другие LSIO_DB_** переменные.
      # Если вы хотите использовать внешнюю базу данных (например, PostgreSQL), вам нужно добавить:
      # - DB_ENGINE=postgresql_psycopg2
      # - DB_HOST=your_db_host # Например, IP или имя сервиса Docker Compose
      # - DB_PORT=5432
      # - DB_NAME=healthchecks_db
      # - DB_USER=healthchecks_user
      # - DB_PASSWORD=your_db_password

    volumes:
      # Монтирование локальной папки для сохранения конфигурации и данных Healthchecks.
      # Замените './healthchecks_config' на путь, где вы хотите хранить данные на хосте.
      - ./healthchecks_config:/config
    ports:
      # Маппинг портов: HOST_PORT:CONTAINER_PORT
      # Порт для веб-интерфейса Healthchecks
      - 8000:8000
      # Порт для SMTP-сервера Healthchecks (опционально, если используете пинги по email)
      # - 2525:2525
    restart: unless-stopped # Всегда перезапускать контейнер, если он остановится (кроме ручной остановки)
